//para clonar un repositorio

git clone git@github.com:jhocolque/nombrerep_git.git

//configurar el nombre y correo

git config --global user.name 'jhocolque'
git config --global user.email jhoelicq@hotmail.com


//el archivo debe estar creado en directorio 'working 'para colocarlo al 'Index' como propuesta con:
git add 'nombre_archivo.xxx'


//Luego lo subimos al 'HEAD' del repositorio local
git commit -m 'comentario...'
git commit -a   //cuando se modifio un solo archivo se puede lleva r al HAED directaente sin pasar por index

//PARA REPOSITORIO REMOTO

//ahora subimos los cambios al repositorio remoto con:
git push origin master

//para actualizar cambios
git pull

//


git remot­e add origi­n git@g­ithub.com:­jhocolque/­try_git.gi­t

 ---- PARA ADICIONAR ARCHIVOS A UN REPOSITORIO NUEVO(VACIO) ----

-  entramos a la carpeta que queremos subir a github
- ejecutamos
	git init
- Agregamos de working dir a index(proceso add), todos los archivos de la carpeta
	git add .
- Agegamos de index a head(proceso commit)
	git commit -m 'commit mensaje'
- para conectarse al repositorio remoto(en el caso de que no se haya clonado ninguno):
	git remote add origin git@github.com:nombre_usuario/nombre_repositorio.git
- Subimos:
	git push -u origin master
  pero si alguien subio cambio al servidor se debe hacer primero:
	git fetch origin
	git merge origin/master
	git push origin master

Mostrando el log de commits con info resumida
	git log --pretty=oneline

Para recuperar un archivo de un commit concreto:
	git show HASH_GIT:ruta_a_archivo_a_recuperar> ruta_a_archivo_recuperado

git checkout 8f969536¿ path/to/file ; retorna un archivo a una version anterior en un commit(lo coloca como commiteado)

git reset --hard HEAD-cant_commits ; elimina una cierta cant. de commits atras borrando todos los archivos de esos commits

git reset  HEAD-cant_commits ; elimina una cierta cant. de commits atras manteniendo todos los archivos de esos commits

git checkout . ; retorna todos los archivos cambiados en el area de trabajo al estado del anterior commit

//--- eliminando una rama remota ---
git branch -rd origin/rama ; elimina una rama remota en nuestra copia local
git push origin :rama_remota ; se elimina 'rama_remota' en la copia remota

git branch -d rama_local ; elimina una rama local forzando su eliminacion si no se integro con otra rama

git cherry-pick codigo_commit ; se copia un commit a la rama actual

git remote -v ; muestra los repositorios remotos y su url

git remote rm nombre_repositorio ; se elimina un repositorio

git branch -m nombre-rama nombre-rama-nueva ; renombra una rama local

git checkout hash_commit ; salta a un determinado commit entrando en estado 'detached HEAD'

Que pasa si se elimina un rama que apunta a commits que no pertenecen a otra rama?

git config --global core.excludesfile ~/.gitignore_global ; configura un archivo ignore global para todos los repositorios del usuario

git rm --cached archivo ; desigue un archivo pero lo mantiene en la carpeta local

Borrar commits del repositoreo remoto:
	git reset HEAD^ # remove commit locally
	git push origin +HEAD # force-push the new HEAD commit

	- Primero borrar los commits localmente luego subir los cambios al remoto con:
		git push origin +rama  o  git push origin rama --force ; sube los cambios forzando los mismos
